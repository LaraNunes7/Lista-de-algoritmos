
#include <stdio.h>
#include <limits.h>
#include <stdbool.h>

#define V 9 // Número de vértices no gráfico

// Função para encontrar o vértice com a menor distância
int min_distancia(int distancias[], bool visitado[]) {
    int menor = INT_MAX, indice_menor;

    for (int v = 0; v < V; v++) {
        if (!visitado[v] && distancias[v] <= menor) {
            menor = distancias[v];
            indice_menor = v;
        }
    }
    return indice_menor;
}

// Função para imprimir o caminho e a distância
void imprimir_resultado(int distancias[], int origem) {
    printf("Vértice\t Distância da Origem (%d)\n", origem);
    for (int i = 0; i < V; i++) {
        printf("%d\t %d\n", i, distancias[i]);
    }
}

// Função que implementa o Algoritmo de Dijkstra
void dijkstra(int grafo[V][V], int origem) {
    int distancias[V];
    bool visitado[V];

    // Inicializa todas as distâncias como infinito e visitado como falso
    for (int i = 0; i < V; i++) {
        distancias[i] = INT_MAX;
        visitado[i] = false;
    }

    // A distância de origem para ela mesma é 0
    distancias[origem] = 0;

    // Encontra o caminho mais curto para todos os vértices
    for (int count = 0; count < V - 1; count++) {
        int u = min_distancia(distancias, visitado);
        visitado[u] = true;

        // Atualiza a distância de todos os vértices adjacentes
        for (int v = 0; v < V; v++) {
            if (!visitado[v] && grafo[u][v] && distancias[u] != INT_MAX && distancias[u] + grafo[u][v] < distancias[v]) {
                distancias[v] = distancias[u] + grafo[u][v];
            }
        }
    }

    // Imprime o resultado
    imprimir_resultado(distancias, origem);
}

int main() {
    // Exemplo de grafo representado como uma matriz de adjacência
    int grafo[V][V] = {
        {0, 4, 0, 0, 0, 0, 0, 8, 0},
        {4, 0, 8, 0, 0, 0, 0, 11, 0},
        {0, 8, 0, 7, 0, 4, 0, 0, 2},
        {0, 0, 7, 0, 9, 14, 0, 0, 0},
        {0, 0, 0, 9, 0, 10, 0, 0, 0},
        {0, 0, 4, 14, 10, 0, 2, 0, 0},
        {0, 0, 0, 0, 0, 2, 0, 1, 6},
        {8, 11, 0, 0, 0, 0, 1, 0, 7},
        {0, 0, 2, 0, 0, 0, 6, 7, 0}
    };

    int origem = 0; // Vértice de origem
    dijkstra(grafo, origem);

    return 0;
}
