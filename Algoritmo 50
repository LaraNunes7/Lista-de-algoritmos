#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_SIZE 1000

// Função para comprimir dados usando RLE
void compressaoRLE(char *input, char *output) {
    int length = strlen(input);
    int count = 1;
    int j = 0;

    for (int i = 1; i < length; i++) {
        if (input[i] == input[i - 1]) {
            count++;
        } else {
            output[j++] = input[i - 1];
            output[j++] = count + '0';  // Converte o número para caractere
            count = 1;
        }
    }
    // Adiciona o último caractere e sua contagem
    output[j++] = input[length - 1];
    output[j++] = count + '0';
    output[j] = '\0';  // Termina a string
}

// Função para descomprimir dados usando RLE
void descompressaoRLE(char *input, char *output) {
    int length = strlen(input);
    int j = 0;

    for (int i = 0; i < length; i += 2) {
        char ch = input[i];
        int count = input[i + 1] - '0';  // Converte o caractere para número
        for (int k = 0; k < count; k++) {
            output[j++] = ch;
        }
    }
    output[j] = '\0';  // Termina a string
}

int main() {
    char input[MAX_SIZE];
    char compressed[MAX_SIZE];
    char decompressed[MAX_SIZE];

    // Entrada de dados
    printf("Digite a string para compressão (somente caracteres alfanuméricos): ");
    fgets(input, sizeof(input), stdin);
    input[strcspn(input, "\n")] = '\0';  // Remove o newline final

    // Compressão
    compressaoRLE(input, compressed);
    printf("String comprimida: %s\n", compressed);

    // Descompressão
    descompressaoRLE(compressed, decompressed);
    printf("String descomprimida: %s\n", decompressed);

    return 0;
}
